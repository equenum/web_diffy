<MudDialog>
    <TitleContent>
        <div class="d-flex align-center">
            <MudIcon Icon="@Icons.Material.Filled.AddBox"/>
            <MudText Typo="Typo.h6" Class="px-2">Add Target</MudText>
        </div>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="Form" @bind-IsValid="@IsFormValid">
            <MudGrid>
                <MudItem xs="6" Class="py-0">
                    <MudTextField @bind-Value="Target.DisplayName" Label="Display Name" Counter="20" MaxLength="20" Immediate="true"
                        Validation="@(new Func<string, string>(ValidateDisplayName))" Class="py-2"
                    />
                </MudItem>
                <MudItem xs="6" Class="py-0">
                    <MudTextField @bind-Value="Target.Description" Label="Description" Counter="50" MaxLength="50" Immediate="true" 
                        Validation="@(new Func<string, string>(ValidateDescription))" Class="py-2"
                    />
                </MudItem>
                <MudItem xs="6" Class="py-0">
                    <MudTextField @bind-Value="Target.Url" Label="Url" Immediate="true" 
                        Validation="@(new Func<string, string>(ValidateUrl))" Class="pt-2 pb-7"
                    />
                </MudItem>
                <MudItem xs="6" Class="py-0">
                    <MudTextField @bind-Value="Target.CronSchedule" Label="Cron Schedule" Immediate="true" 
                        Validation="@(new Func<string, string>(ValidateCronSchedule))" Class="pt-2 pb-7"
                    />
                </MudItem>
                <MudItem xs="6" Class="py-0">
                    <MudSelect T="string" Class="py-2" Label="Change Type" Value="Target.ChangeType.ToString()" 
                        ValueChanged="@((string value) => SetChangeType(value))">
                        @foreach (var type in Enum.GetValues(typeof(ChangeType)))
                        {
                            <MudSelectItem Value="@type.ToString()" />
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="6" Class="py-0">
                    <MudTextField @bind-Value="Target.HtmlTag" Label="Html Tag" Counter="20" MaxLength="20" Immediate="true" 
                        Validation="@(new Func<string, string>(ValidateHtmlTag))" Class="py-2"
                    />
                </MudItem>
                <MudItem xs="6" Class="py-0">
                    <MudSelect
                        T="string" Class="py-2" Label="Selector Type" Value="Target.SelectorType.ToString()" 
                        ValueChanged="@((string value) => SetSelectorType(value))">
                        @foreach (var type in Enum.GetValues(typeof(SelectorType)))
                        {
                            <MudSelectItem Value="@type.ToString()" />
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="6" Class="py-0">
                    <MudTextField @bind-Value="Target.SelectorValue" Label="Selector Value" Counter="50" MaxLength="50" Immediate="true" 
                        Validation="@(new Func<string, string>(ValidateSelectorValue))" Class="py-2"
                    />
                </MudItem>
                <MudItem xs="6" Class="py-0">
                    <MudTextField @bind-Value="Target.ExpectedValue" Label="Expected Value" Counter="100" MaxLength="100" Immediate="true" 
                        Validation="@(new Func<string, string>(ValidateExpectedValue))" Class="py-2"
                    />
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <div class="pb-1">
            <MudButton Variant="Variant.Filled" OnClick="Cancel" Class="mx-2">Cancel</MudButton>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="AddTargetAsync" Disabled="@(!IsFormValid)">Add</MudButton>
        </div>
    </DialogActions>
</MudDialog>

@code {
    private MudForm Form;
    private bool IsFormValid;

    private string ValidateDisplayName(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            return ValidationMessages.Required;
        }
        
        return null;
    }

    private string ValidateDescription(string value)
    {
        if (!string.IsNullOrEmpty(value))
        {
            var trimmedValue = value.Replace(" ", string.Empty);
            if (trimmedValue.Length == 0)
            {
                return ValidationMessages.Empty;
            }
        }

        return null;
    }

    private string ValidateUrl(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            return ValidationMessages.Required;
        }

        var isValidUrl = Uri.TryCreate(value, UriKind.Absolute, out var uriResult);

        if (!isValidUrl)
        {
            return ValidationMessages.Url;
        }

        if (isValidUrl && uriResult.Scheme != Uri.UriSchemeHttp && uriResult.Scheme != Uri.UriSchemeHttps)
        { 
            return ValidationMessages.UrlSchema;
        }

        return null;
    }

    private string ValidateCronSchedule(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            return ValidationMessages.Required;
        }

        if (!CronExpression.IsValidExpression(value))
        {
            return ValidationMessages.CronExpression;
        }
        
        return null;
    }

    private string ValidateHtmlTag(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            return ValidationMessages.Required;
        }

        return null;
    }

    private string ValidateSelectorValue(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            return ValidationMessages.Required;
        }

        return null;
    }

    private string ValidateExpectedValue(string value)
    {
        if (!string.IsNullOrEmpty(value))
        {
            var trimmedValue = value.Replace(" ", string.Empty);
            if (trimmedValue.Length == 0)
            {
                return ValidationMessages.Empty;
            }
        }

        return null;
    }
}